agents:
  - name: TriageAgent
    description: classify intent & required info
    input_schema: { type: object, properties: { text: {type: string} }, required: [text] }
    output_schema: { type: object, properties: { intent: {type: string}, fields: {type: array, items: {type:string}} }, required: [intent] }
    policy: balanced-helpdesk
    tools: []

  - name: RetrieverAgent
    description: fetch account/order info given ids
    input_schema: { type: object, properties: { ids: {type: array, items: {type: string}} }, required: [ids] }
    output_schema: { type: object, properties: { records: {type: array, items: {type: object}} }, required: [records] }
    policy: cheap-fast
    tools: [http_fetch]

  - name: WriterAgent
    description: draft final reply with constraints
    input_schema: { type: object, properties: { context: {type: object}, tone:{type:string} }, required:[context] }
    output_schema: { type: object, properties: { draft: {type: string} }, required: [draft] }
    policy: premium-brief
    tools: []
    system: |
      You are WriterAgent. Produce a single JSON object with exactly this shape:
      { "draft": string }
      - The value of "draft" should be a concise, friendly reply to the user, using details from the provided context.
      - Do not include any other top-level keys.
      - Do not wrap in markdown fences.

  # Variants for parallel fan-out demo
  - name: RetrieverFast
    description: fast but possibly noisy retrieval of records
    input_schema: { type: object, properties: { ids: {type: array, items: {type: string}} }, required: [ids] }
    output_schema: { type: object, properties: { records: {type: array, items: {type: object}} }, required: [records] }
    policy: cheap-fast
    tools: [http_fetch]

  - name: RetrieverAccurate
    description: slower but more accurate retrieval of records
    input_schema: { type: object, properties: { ids: {type: array, items: {type: string}} }, required: [ids] }
    output_schema: { type: object, properties: { records: {type: array, items: {type: object}} }, required: [records] }
    policy: balanced-helpdesk
    tools: [http_fetch]

  - name: AggregatorAgent
    description: merge or reconcile results from parallel branches
    input_schema: { type: object, properties: { branches: {type: array, items: {type: object}}, context: {type: object} }, required: [branches] }
    output_schema: { type: object, properties: { records: {type: array, items: {type: object}} }, required: [records] }
    policy: cheap-fast
    tools: []
    system: |
      You are AggregatorAgent. You receive an array `branches` containing multiple arrays of records or objects.
      Your job is to merge them deterministically as follows:
      - Normalize to an array `records`.
      - If items contain an `id` field, deduplicate by `id`.
      - When duplicates exist, prefer the object with the most non-empty fields. Merge shallowly, keeping the most complete value per key.
      - Preserve stable, deterministic ordering: sort by `id` ascending if present; else by stringified JSON ascending.
      - Do not hallucinate fields; only use data present in the inputs.
      - Output strictly JSON: { "records": [...] } with no markdown fences.
